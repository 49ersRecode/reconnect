// <auto-generated />
using System;
using API_Reconnect.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Reconnect.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API_Reconnect.Models.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Mensagem")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicoId");

                    b.ToTable("Contatos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "lukasich@com",
                            Mensagem = "Gostaria de saber quanto custa ir para Fortaleza de carro!",
                            Nome = "Lucas Chaves",
                            ServicoId = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "juca@com",
                            Mensagem = "Quanto custo reformar meu quarto?",
                            Nome = "Juca Paz",
                            ServicoId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "anto@com",
                            Mensagem = "Você ensina à domicílio?",
                            Nome = "Antônio Freitas",
                            ServicoId = 1
                        });
                });

            modelBuilder.Entity("API_Reconnect.Models.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Concluido")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Contratos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Concluido = false,
                            DataHora = new DateTime(2024, 2, 18, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua do chinelo, 20",
                            ServicoId = 2,
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 2,
                            Concluido = false,
                            DataHora = new DateTime(2024, 2, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua do Ensino Fundamental, 50",
                            ServicoId = 1,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 3,
                            Concluido = false,
                            DataHora = new DateTime(2024, 3, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Avenida Perdida, 120",
                            ServicoId = 3,
                            UsuarioId = 2
                        });
                });

            modelBuilder.Entity("API_Reconnect.Models.FaleConosco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Mensagem")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("FaleConosco");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "moraes@com",
                            Mensagem = "Gostei muito do sistema, mas gostaria de trocar minha senha.",
                            Nome = "Moraes",
                            Status = false
                        },
                        new
                        {
                            Id = 2,
                            Email = "antoinho@com",
                            Mensagem = "Como faço para me cadastrar sem ter um telefone?",
                            Nome = "Antony Stark",
                            Status = false
                        },
                        new
                        {
                            Id = 3,
                            Email = "nando@com",
                            Mensagem = "Gostaria de saber como cadasro meu serviço.",
                            Nome = "Fernanda Kipper",
                            Status = false
                        });
                });

            modelBuilder.Entity("API_Reconnect.Models.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Servicos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Serviços de professores",
                            Nome = "Ensino",
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Reformas de todos os tipos",
                            Nome = "Construção",
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Motorista de aplicativo",
                            Nome = "Motorista",
                            UsuarioId = 3
                        });
                });

            modelBuilder.Entity("API_Reconnect.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DatNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Profissao")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "123.456.789-98",
                            DatNascimento = new DateTime(1985, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "irineu@com",
                            Endereco = "Rua do gatos, n. 0",
                            Nome = "Irineu Júnior",
                            Profissao = "Pedreiro",
                            Senha = "123",
                            Telefone = "(12)98734-5678"
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "123.874.965-98",
                            DatNascimento = new DateTime(1965, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carol@com",
                            Endereco = "Rua do viajantes, n. 10",
                            Nome = "Carol Danvers",
                            Profissao = "Motorista",
                            Senha = "123",
                            Telefone = "(97)98754-9548"
                        },
                        new
                        {
                            Id = 3,
                            Cpf = "987.874.965-98",
                            DatNascimento = new DateTime(1942, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve@com",
                            Endereco = "Rua do caps, n. 450",
                            Nome = "Steve Rogers",
                            Profissao = "Professor",
                            Senha = "123",
                            Telefone = "(97)97541-6532"
                        });
                });

            modelBuilder.Entity("API_Reconnect.Models.Contato", b =>
                {
                    b.HasOne("API_Reconnect.Models.Servico", "Servico")
                        .WithMany("Contatos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("API_Reconnect.Models.Contrato", b =>
                {
                    b.HasOne("API_Reconnect.Models.Servico", "Servico")
                        .WithMany("Contratos")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Reconnect.Models.Usuario", "Usuario")
                        .WithMany("Contratos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servico");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_Reconnect.Models.Servico", b =>
                {
                    b.HasOne("API_Reconnect.Models.Usuario", "Usuario")
                        .WithMany("Servicos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("API_Reconnect.Models.Servico", b =>
                {
                    b.Navigation("Contatos");

                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("API_Reconnect.Models.Usuario", b =>
                {
                    b.Navigation("Contratos");

                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
